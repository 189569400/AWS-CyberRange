version: 2

references:

base_image: &base_image
  hashicorp/terraform:latest

working_directory: &working_directory
  ~/CyberRange

gitclone_dir: &gitclone_dir
  ~/CyberRange

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_terraform_environment: &set_terraform_environment
  run:
    name: set terraform environment
    command: |
      cd && touch $BASH_ENV
      apk add bash curl
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        echo 'export TERRAFORM_ENVIRONMENT=us-east-1' >> $BASH_ENV
      else
        echo 'export TERRAFORM_ENVIRONMENT=us-east-1' >> $BASH_ENV
      fi

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      source $BASH_ENV
      cd ~/CyberRange/terraform/environments/$TERRAFORM_ENVIRONMENT
      terraform init

alpine_setup: &alpine_setup
  run:
    name: alpine_setup
    command: |
      apk update
      apk upgrade
      apk add curl wget bash git
      apk add ruby ruby-bundler
      apk add ruby ruby-dev make gcc libc-dev g++ python python-dev py-pip build-base ruby-rdoc
      pip install awscli
      apk --purge -v del py-pip
      rm -rf /var/cache/apk/*



apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *set_terraform_environment
    - *terraform_init
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          source $BASH_ENV
          cd ~/CyberRange/terraform/keys
          echo '-----BEGIN RSA PRIVATE KEY-----' > circleci_terraform
          echo $AWS_SSH_KEY | sed -e 's/\s\+/\n/g' >> circleci_terraform
          echo '-----END RSA PRIVATE KEY-----' >> circleci_terraform
          chmod 700 circleci_terraform
#          todo: update cicd job w/ makefile
          cd ~/CyberRange/terraform/environments/$TERRAFORM_ENVIRONMENT
          terraform apply --auto-approve
          terraform output -json > /tmp/output.json
          cd ~/CyberRange/terraform/keys
          mv circleci_terraform .circleci_terraform
    - *alpine_setup
    - run:
        name: Delete Terraform Assets
#        when: on_fail
        command: |
          source $BASH_ENV
          cd ~/CyberRange/terraform/environments/$TERRAFORM_ENVIRONMENT
          terraform destroy -force

jobs:

  build:
    <<: *default_config
    steps:
      - checkout
      - *set_terraform_environment
      - run:
          name: terraform init
          command: terraform init -input=false
      - run:
          name: Check if Terraform configurations are properly formatted
          command: if [[ -n "$(terraform fmt -write=false)" ]]; then echo "Some terraform files need be formatted, running 'terraform fmt' to fix"; terraform fmt; fi
      - run:
          name: Install tflint
          command: curl -L -o /tmp/tflint.zip https://github.com/wata727/tflint/releases/download/v0.4.2/tflint_linux_amd64.zip && unzip /tmp/tflint.zip -d /usr/local/bin
      - run:
          name: Check Terraform configurations with tflint
          command: tflint
      - run:
          name: terraform format (fmt) check # 2
          command: |
            source $BASH_ENV
            cd ~/CyberRange/terraform/environments/$TERRAFORM_ENVIRONMENT
            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 1 ]; then
              echo "Format of this terraform files is not appropiate:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .

              echo
              echo "Please run terraform fmt"

              exit 1
            fi
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd ~/CyberRange/terraform/keys
            echo '-----BEGIN RSA PRIVATE KEY-----' > circleci_terraform
            echo $AWS_SSH_KEY | sed -e 's/\s\+/\n/g' >> circleci_terraform
            echo '-----END RSA PRIVATE KEY-----' >> circleci_terraform
            chmod 700 circleci_terraform
            cd ~/CyberRange/terraform/environments/$TERRAFORM_ENVIRONMENT
            terraform init
            terraform plan -out=../../terraform.plan
            apk add python python-dev py-pip
            pip install awscli
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./terraform/terraform.plan

  apply:
    <<: *apply_job

  apply-with-approval:
    <<: *apply_job


workflows:
  version: 2
  development_build:
    jobs:
      - build
      - plan:
          requires:
            - build
#    todo: apply plan
      - apply:
          requires:
            - plan
          filters:
            branches:
              only: master
